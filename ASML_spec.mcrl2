sort
	Operation_Mode = struct Normal | Sluice_1_Broken | Sluice_2_Broken | Sluice_12_Broken;
	Sluice = struct Sluice_1 | Sluice_2;
	Robot = struct Robot_1?isRobot_1 | Robot_2?isRobot_2 | Robot_3?isRobot_3;
	IPU = struct IPU_1;
	Location = struct Location_InRack | Location_OutRack | Location_Sluice_1 | Location_Sluice_2 | Location_InWaitRack | Location_OutWaitRack | Location_IPU;
	SluiceState = struct InsideOpen | OutsideOpen | Vacuum | NoVacuum | UnknownSluice;
	WaferState = struct None | Pre | Post | UnknownWafer;

act
	% Sluice Controlls
	% Door Controlls communication (Internal)
	S_Occupy_Sluice			: Sluice # SluiceState;
	R_Occupy_Sluice			: Sluice # SluiceState;
	Occupy_Sluice			: Sluice # SluiceState;
	S_Release_Sluice		: Sluice # SluiceState;
	R_Release_Sluice		: Sluice # SluiceState;
	Release_Sluice			: Sluice # SluiceState;
	

	Controller_Command_Sluice		: Sluice # SluiceState;
	
	S_Sluice_Command				: Sluice # SluiceState;
	R_Sluice_Command				: Sluice # SluiceState;


	Sluice_ACK		: Sluice # Bool;
	S_Sluice_ACK	: Sluice # Bool; % Action taken by the Physical Sluice s telling
									  %  the controller that it has opened its inside door.
	R_Sluice_ACK	: Sluice # Bool; % Action taken by the controller to receive
									  % an acknowdlegement message from sluice s.

	% Door Controlls (External)
	P_Open_Inside_Door		: Sluice; % Action taken by the Physical Sluice s to
									  % Physically open its door
	P_Open_Outside_Door		: Sluice;
	P_Close_Inside_Door		: Sluice;
	P_Close_Outside_Door	: Sluice;
	

	% Vacuum Pump Controlls (External)
	P_Create_Vacuum				: Sluice;
	P_Undo_Vacuum				: Sluice; 

	% Disabling of Sluice Controlls
	Break					: Sluice; % Communication of multi-action
									  %  S_Break | R_Break
	Fix						: Sluice; % Communication of multi-action
									  %  S_Fix | R_Fix
	
	S_Break					: Sluice; % Action taken by the Controller telling the
									  %  Sluice s to simulate a breakdown.
									  %  Communication with R_Break(s)
									  %  results in Break(s)
	S_Fix					: Sluice; % Action taken by the Controller telling the
									  %  Sluice s to simulate being fixed.
									  %  Communication with R_Fix(s)
									  %  results in Fix(s)
	
	R_Break					: Sluice; % Action taken by the Physical Sluice s to 
									  %  Simulate it breaking down.
									  %  Communication with S_Break(s)
									  %  results in Break(s)
	R_Fix					: Sluice; % Action taken by the Controller telling the
									  %  Sluice s to simulate a breakdown.
									  %  Communication with S_Fix(s)
									  %  results in Fix(s)

	P_Break					: Sluice;
	P_Fix					: Sluice;

	% Robot Controlls
	Robot_Pick_Up		: Robot # Location; % Communication of multi-action
											%  S_Robot_Pick_Up | R_Robot_Pick_Up
	Robot_Put_Down		: Robot # Location; % Communication of multi-action
											%  S_Robot_Put_Down | R_Robot_Put_Down

	S_Robot_Pick_Up		: Robot # Location; % Action taken by the Controller telling the
											%  Robot r to pick up a wafer at Location l.
											%  Communication with R_Robot_Pick_Up(r,l)
											%  results in Robot_Pick_Up
	S_Robot_Put_Down	: Robot # Location; % Action taken by the Controller telling the
											%  Robot r to put down a wafer at Location l.
											%  Communication with R_Robot_Put_Down(r,l)
											%  results in Robot_Put_Down

	R_Robot_Pick_Up		: Robot # Location; % Action taken by the Physical Robot r
											%  to pick up a wafer at Location l.
											%  Communication with S_Robot_Pick_Up(r,l)
											%  results in Robot_Pick_Up
	R_Robot_Put_Down	: Robot # Location; % Action taken by the Physical Robot r
											%  to put down a wafer at Location l.
											%  Communication with S_Robot_Put_Down(r,l)
											%  results in Robot_Put_Down





	% IPU Controlls (Internal)
	Controller_IPU_On			: IPU; % Communication of multi-action
						   %  S_IPU_On | R_IPU_On
	Controller_IPU_Off			: IPU; % Communication of multi-action
						   %  S_IPU_Off | R_IPU_Off
	
	S_IPU_On		: IPU; % Action taken by the Controller telling the IPU i to turn on.
						   %  Communication with R_IPU_On(i) results in IPU_On(i)
	S_IPU_Off		: IPU; % Action taken by the Controller telling the IPU i to turn off.
						   %  Communication with R_IPU_Off(i) results in IPU_Off(i)

	R_IPU_On		: IPU; % Action taken by the IPU i to turn on.
						   %  Communication with S_IPU_On(i) results in IPU_On(i)
	R_IPU_Off		: IPU; % Action taken by the IPU i to turn on.
						   %  Communication with S_IPU_Off(i) results in IPU_Off(i)

	IPU_IPU_On			: IPU;
	IPU_IPU_Off			: IPU;

	S_ACK_IPU_On		: IPU; % Action taken by the Controller telling the IPU i to turn on.
						   %  Communication with R_IPU_On(i) results in IPU_On(i)
	S_ACK_IPU_Off		: IPU; % Action taken by the Controller telling the IPU i to turn off.
						   %  Communication with R_IPU_Off(i) results in IPU_Off(i)

	R_ACK_IPU_On		: IPU; % Action taken by the IPU i to turn on.
						   %  Communication with S_IPU_On(i) results in IPU_On(i)
	R_ACK_IPU_Off		: IPU; % Action taken by the IPU i to turn on.
						   %  Communication with S_IPU_Off(i) results in IPU_Off(i)

	% IPU Controlls (External)
	P_IPU_On			: IPU;
	P_IPU_Off			: IPU;

	%Need to add actions to occupy a sluice to pick and put in wafers




proc
	Physical_Sluice(s: Sluice, broken : Bool, state : SluiceState) = 
	% Proccess that represents the Physical Sluice and the Vacuum pump associated with it
		(broken == false) -> (
			(state == Vacuum) -> (
				R_Sluice_Command(s, InsideOpen).(P_Open_Inside_Door(s).S_Sluice_ACK(s, true).Physical_Sluice(s, false, InsideOpen) + P_Break(s).S_Sluice_ACK(s, false).Physical_Sluice(s,true, state))
				+ R_Sluice_Command(s, NoVacuum).(P_Undo_Vacuum(s).S_Sluice_ACK(s, true).Physical_Sluice(s,false,NoVacuum) + P_Break(s).S_Sluice_ACK(s, false).Physical_Sluice(s, true, state))
			)
			+ (state == InsideOpen) -> (
				R_Sluice_Command(s, Vacuum).(P_Close_Inside_Door(s).S_Sluice_ACK(s, true).Physical_Sluice(s,false, Vacuum) + P_Break(s).S_Sluice_ACK(s, false).Physical_Sluice(s,true,state))
				+ R_Occupy_Sluice(s, state).R_Release_Sluice(s,state).Physical_Sluice(s, broken, state)
			)
			+ (state == NoVacuum) -> (
				R_Sluice_Command(s, OutsideOpen).(P_Open_Outside_Door(s).S_Sluice_ACK(s, true).Physical_Sluice(s,false,OutsideOpen) + P_Break(s).S_Sluice_ACK(s, false).Physical_Sluice(s,true,state))
				+ R_Sluice_Command(s, Vacuum).(P_Create_Vacuum(s).S_Sluice_ACK(s,true).Physical_Sluice(s,false,Vacuum) + P_Break(s).S_Sluice_ACK(s, false).Physical_Sluice(s, true, state))
			)
			+ (state == OutsideOpen) -> (
				R_Sluice_Command(s, NoVacuum).(P_Close_Outside_Door(s).S_Sluice_ACK(s, true).Physical_Sluice(s,false, NoVacuum) + P_Break(s).S_Sluice_ACK(s, false).Physical_Sluice(s,true,state))
				+ R_Occupy_Sluice(s, state).R_Release_Sluice(s,state).Physical_Sluice(s, broken, state)
			)
		)
		+ (broken == true) -> (
			P_Fix(s).S_Fix(s).Physical_Sluice(s,false,state)
		);

	Physical_Robot(r : Robot) = 
	% Process that represents the Physical Robot 
		(
			(r == Robot_1) -> (
				R_Robot_Pick_Up(r, Location_InRack).(R_Robot_Put_Down(r, Location_InRack) + R_Robot_Put_Down(r, Location_Sluice_1) + R_Robot_Put_Down(r, Location_Sluice_2))
				+ (R_Robot_Pick_Up(r, Location_Sluice_1) + R_Robot_Pick_Up(r, Location_Sluice_2)).(R_Robot_Put_Down(r, Location_InRack) + R_Robot_Put_Down(r, Location_OutRack))
			)
			+ (r == Robot_2) -> (
				(R_Robot_Pick_Up(r, Location_Sluice_1) + R_Robot_Pick_Up(r, Location_Sluice_2)).R_Robot_Put_Down(r, Location_InWaitRack)
				+ R_Robot_Pick_Up(r, Location_OutWaitRack).(R_Robot_Put_Down(r, Location_Sluice_1) + R_Robot_Put_Down(r, Location_Sluice_2))
			)
			+ (r == Robot_3) -> (
				R_Robot_Pick_Up(r, Location_InWaitRack).R_Robot_Put_Down(r, Location_IPU)
				+ R_Robot_Pick_Up(r, Location_IPU).R_Robot_Put_Down(r, Location_OutWaitRack)
			)
		).Physical_Robot(r);

	Physical_IPU(i : IPU, TurnedOn : Bool) =
	% Process that represents the Physical IPU
		(!TurnedOn) -> (
			R_IPU_On(i).P_IPU_On(i).S_ACK_IPU_On(i).Physical_IPU(i, true)
		)
		+ (TurnedOn) -> (
			R_IPU_Off(i).P_IPU_Off(i).S_ACK_IPU_Off(i).Physical_IPU(i, false)
		)
		;

	Controller(op: Operation_Mode, oc_robot_1: WaferState, oc_robot_2: WaferState, oc_robot_3: WaferState, oc_sluice_1: WaferState, oc_sluice_2: WaferState, oc_InWaitRack: WaferState, oc_OutWaitRack: WaferState, oc_IPU: WaferState) = 
	% Process that represents the controller that gives commands to all the different components (Sluices, Robots and IPU)
		(op == Normal) -> (
		% System is in Normal Operating modus)
			% There is No Vacuum inside Sluice_1 so the outside door can be opened or a Vacuum can be created
			S_Sluice_Command(Sluice_1, OutsideOpen).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ S_Sluice_Command(Sluice_1, Vacuum).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			
			% The outside Door of Sluice_1 is currently open so it can be closed or inside the sluice there is a vacuum and that can be undone
			+ S_Sluice_Command(Sluice_1, NoVacuum).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			
			% There is a Vacuum inside Sluice_1 so the inside door can be opened or the Vacuum can be undone
			+ S_Sluice_Command(Sluice_1, InsideOpen).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)


			%Receive Signal from the sluice about state
			+ R_Sluice_ACK(Sluice_1, true).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ R_Sluice_ACK(Sluice_1, false).Controller(Sluice_1_Broken,oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
 
			+ S_Sluice_Command(Sluice_2, OutsideOpen).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ S_Sluice_Command(Sluice_2, Vacuum).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)

			+ S_Sluice_Command(Sluice_2, NoVacuum).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)

			+ S_Sluice_Command(Sluice_2, InsideOpen).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)

			+ R_Sluice_ACK(Sluice_2, true).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ R_Sluice_ACK(Sluice_2, false).Controller(Sluice_2_Broken,oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU) 

			+ R_Break(Sluice_1).Controller(Sluice_1_Broken, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ R_Break(Sluice_2).Controller(Sluice_2_Broken, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ (oc_robot_1 == None) -> (
				(oc_sluice_1 == None) -> (
					S_Robot_Pick_Up(Robot_1, Location_InRack).Controller(op, Pre, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_2 == Post) -> (
					S_Occupy_Sluice(Sluice_2, OutsideOpen).S_Robot_Pick_Up(Robot_1, Location_Sluice_2).S_Release_Sluice(Sluice_2, OutsideOpen).Controller(op, Post, oc_robot_2, oc_robot_3, oc_sluice_1, None, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_1 == Post) -> (
					S_Occupy_Sluice(Sluice_1, OutsideOpen).S_Robot_Pick_Up(Robot_1, Location_Sluice_1).S_Release_Sluice(Sluice_1, OutsideOpen).Controller(op, Post, oc_robot_2, oc_robot_3, None, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
			)
			+ (oc_robot_1 == Pre) -> (
				(oc_sluice_1 != None) -> (
					S_Robot_Put_Down(Robot_1, Location_InRack).Controller(op, None, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_1 == None) -> (
					S_Occupy_Sluice(Sluice_1, OutsideOpen).S_Robot_Put_Down(Robot_1, Location_Sluice_1).S_Release_Sluice(Sluice_1, OutsideOpen).Controller(op, None, oc_robot_2, oc_robot_3, Pre, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
			)
			+ (oc_robot_1 == Post) -> (
				S_Robot_Put_Down(Robot_1, Location_OutRack).Controller(op, None, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			)
			+ (oc_robot_2 == None) -> (
				(oc_sluice_1 == Pre && oc_InWaitRack == None) -> (
					S_Occupy_Sluice(Sluice_1, InsideOpen).S_Robot_Pick_Up(Robot_2, Location_Sluice_1).S_Release_Sluice(Sluice_1, InsideOpen).Controller(op, oc_robot_1, Pre, oc_robot_3, None, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_2 == Pre && oc_InWaitRack == None) -> (
					S_Occupy_Sluice(Sluice_2, InsideOpen).S_Robot_Pick_Up(Robot_2, Location_Sluice_2).S_Release_Sluice(Sluice_2, InsideOpen).Controller(op, oc_robot_1, Pre, oc_robot_3, oc_sluice_1, None, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_2 == None && oc_OutWaitRack == Post) -> (
					S_Robot_Pick_Up(Robot_2, Location_OutWaitRack).Controller(op, oc_robot_1, Post, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, None, oc_IPU)
				)
			)
			+ (oc_robot_2 == Pre) -> (
				(oc_InWaitRack == None) -> (
					S_Robot_Put_Down(Robot_2, Location_InWaitRack).Controller(op, oc_robot_1, None, oc_robot_3, oc_sluice_1, oc_sluice_2, Pre, oc_OutWaitRack, oc_IPU)
				)
			)
			+ (oc_robot_2 == Post) -> (
				(oc_sluice_2 == None) -> (
					S_Occupy_Sluice(Sluice_2, InsideOpen).S_Robot_Put_Down(Robot_2, Location_Sluice_2).S_Release_Sluice(Sluice_2, InsideOpen).Controller(op, oc_robot_1, None, oc_robot_3, oc_sluice_1, Post, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
			)
		)
		+ (op == Sluice_1_Broken) -> (
		% Sluice_1 of the system is broken so it cannot be opened or closed only repaired
			S_Sluice_Command(Sluice_2, OutsideOpen).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ S_Sluice_Command(Sluice_2, Vacuum).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)

			+ S_Sluice_Command(Sluice_2, NoVacuum).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)

			+ S_Sluice_Command(Sluice_2, InsideOpen).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)

			+ R_Sluice_ACK(Sluice_2, true).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ R_Sluice_ACK(Sluice_2, false).Controller(Sluice_2_Broken,oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU) 

			+ R_Fix(Sluice_1).Controller(Normal, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ (oc_robot_1 == None) -> (
				(oc_sluice_2 == None) -> (
					S_Robot_Pick_Up(Robot_1, Location_InRack).Controller(op, Pre, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_2 == Post) -> (
					S_Occupy_Sluice(Sluice_2, OutsideOpen).S_Robot_Pick_Up(Robot_1, Location_Sluice_2).S_Release_Sluice(Sluice_2, OutsideOpen).Controller(op, Post, oc_robot_2, oc_robot_3, oc_sluice_1, None, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_2 == Pre 
					&& (
					(oc_robot_2 != None && oc_InWaitRack != None && oc_robot_3 != None) || (oc_robot_2 != None && oc_InWaitRack != None && oc_IPU != None)
					|| (oc_robot_2 != None && oc_IPU != None && oc_OutWaitRack != None) || (oc_InWaitRack != None && oc_IPU != None && oc_OutWaitRack != None)
					)) -> (
					S_Occupy_Sluice(Sluice_2, OutsideOpen).S_Robot_Pick_Up(Robot_1, Location_Sluice_2).S_Release_Sluice(Sluice_2, OutsideOpen).Controller(op, Pre, oc_robot_2, oc_robot_3, oc_sluice_1, None, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
			)
			+ (oc_robot_1 == Pre) -> (
				(oc_sluice_2 != None) -> (
					S_Robot_Put_Down(Robot_1, Location_InRack).Controller(op, None, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_2 == None && oc_robot_2 != Post && 
					!(
					(oc_robot_2 != None && oc_InWaitRack != None && oc_robot_3 != None) || (oc_robot_2 != None && oc_InWaitRack != None && oc_IPU != None)
					|| (oc_robot_2 != None && oc_IPU != None && oc_OutWaitRack != None) || (oc_InWaitRack != None && oc_IPU != None && oc_OutWaitRack != None)
					)
				) -> ( %Not already 3 Wafers in the machine and robot_2 is not trying to put a wafer away
					S_Occupy_Sluice(Sluice_2, OutsideOpen).S_Robot_Put_Down(Robot_1, Location_Sluice_2).S_Release_Sluice(Sluice_2, OutsideOpen).Controller(op, None, oc_robot_2, oc_robot_3, oc_sluice_1, Pre, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
					)
			)
			+ (oc_robot_1 == Post) -> (
				S_Robot_Put_Down(Robot_1, Location_OutRack).Controller(op, None, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			)
			+ (oc_robot_2 == None) -> (
				(oc_sluice_2 == Pre && oc_InWaitRack == None) -> (
					S_Occupy_Sluice(Sluice_2, InsideOpen).S_Robot_Pick_Up(Robot_2, Location_Sluice_2).S_Release_Sluice(Sluice_2, InsideOpen).Controller(op, oc_robot_1, Pre, oc_robot_3, oc_sluice_1, None, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_2 == None && oc_OutWaitRack == Post) -> (
					S_Robot_Pick_Up(Robot_2, Location_OutWaitRack).Controller(op, oc_robot_1, Post, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, None, oc_IPU)
				)
			)
			+ (oc_robot_2 == Pre) -> (
				(oc_InWaitRack == None) -> (
					S_Robot_Put_Down(Robot_2, Location_InWaitRack).Controller(op, oc_robot_1, None, oc_robot_3, oc_sluice_1, oc_sluice_2, Pre, oc_OutWaitRack, oc_IPU)
				)
			)
			+ (oc_robot_2 == Post) -> (
				(oc_sluice_2 == None) -> (
					S_Occupy_Sluice(Sluice_2, InsideOpen).S_Robot_Put_Down(Robot_2, Location_Sluice_2).S_Release_Sluice(Sluice_2, InsideOpen).Controller(op, oc_robot_1, None, oc_robot_3, oc_sluice_1, Post, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
			)
		)
		+ (op == Sluice_2_Broken) -> (
		% Sluice_2 of the system is broken so it cannot be opened or closed only repaired
			% There is No Vacuum inside Sluice_1 so the outside door can be opened or a Vacuum can be created
			S_Sluice_Command(Sluice_1, OutsideOpen).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ S_Sluice_Command(Sluice_1, Vacuum).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			
			% The outside Door of Sluice_1 is currently open so it can be closed
			+ S_Sluice_Command(Sluice_1, NoVacuum).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			
			% There is a Vacuum inside Sluice_1 so the inside door can be opened or the Vacuum can be undone
			+ S_Sluice_Command(Sluice_1, InsideOpen).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)

			+ R_Sluice_ACK(Sluice_1, true).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ R_Sluice_ACK(Sluice_1, false).Controller(Sluice_1_Broken,oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			
			+ R_Fix(Sluice_2).Controller(Normal, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ (oc_robot_1 == None) -> (
				(oc_sluice_1 == None) -> (
					S_Robot_Pick_Up(Robot_1, Location_InRack).Controller(op, Pre, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_1 == Post) -> (
					S_Occupy_Sluice(Sluice_1, OutsideOpen).S_Robot_Pick_Up(Robot_1, Location_Sluice_1).S_Release_Sluice(Sluice_1, OutsideOpen).Controller(op, Post, oc_robot_2, oc_robot_3, None, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_1 == Pre
					&& (
					(oc_robot_2 != None && oc_InWaitRack != None && oc_robot_3 != None) || (oc_robot_2 != None && oc_InWaitRack != None && oc_IPU != None)
					|| (oc_robot_2 != None && oc_IPU != None && oc_OutWaitRack != None) || (oc_InWaitRack != None && oc_IPU != None && oc_OutWaitRack != None)
					)) -> (
					S_Occupy_Sluice(Sluice_1, OutsideOpen).S_Robot_Pick_Up(Robot_1, Location_Sluice_1).S_Release_Sluice(Sluice_1, OutsideOpen).Controller(op, Pre, oc_robot_2, oc_robot_3, None, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
			)
			+ (oc_robot_1 == Pre) -> (
				(oc_sluice_1 != None) -> (
					S_Robot_Put_Down(Robot_1, Location_InRack).Controller(op, None, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_1 == None && oc_robot_2 != Post && 
					!(
					(oc_robot_2 != None && oc_InWaitRack != None && oc_robot_3 != None) || (oc_robot_2 != None && oc_InWaitRack != None && oc_IPU != None)
					|| (oc_robot_2 != None && oc_IPU != None && oc_OutWaitRack != None) || (oc_InWaitRack != None && oc_IPU != None && oc_OutWaitRack != None)
					)
				) -> ( %Not already 3 Wafers in the machine and robot_2 is not trying to put a wafer away
					S_Occupy_Sluice(Sluice_1, OutsideOpen).S_Robot_Put_Down(Robot_1, Location_Sluice_1).S_Release_Sluice(Sluice_1, OutsideOpen).Controller(op, None, oc_robot_2, oc_robot_3, Pre, None, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
			)
			+ (oc_robot_1 == Post) -> (
				S_Robot_Put_Down(Robot_1, Location_OutRack).Controller(op, None, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			)
			+ (oc_robot_2 == None) -> (
				(oc_sluice_1 == Pre && oc_InWaitRack == None) -> (
					S_Occupy_Sluice(Sluice_1, InsideOpen).S_Robot_Pick_Up(Robot_2, Location_Sluice_1).S_Release_Sluice(Sluice_1, InsideOpen).Controller(op, oc_robot_1, Pre, oc_robot_3, None, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
				+ (oc_sluice_1 == None && oc_OutWaitRack == Post) -> (
					S_Robot_Pick_Up(Robot_2, Location_OutWaitRack).Controller(op, oc_robot_1, Post, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, None, oc_IPU)
				)
			)
			+ (oc_robot_2 == Pre) -> (
				(oc_InWaitRack == None) -> (
					S_Robot_Put_Down(Robot_2, Location_InWaitRack).Controller(op, oc_robot_1, None, oc_robot_3, oc_sluice_1, oc_sluice_2, Pre, oc_OutWaitRack, oc_IPU)
				)
			)
			+ (oc_robot_2 == Post) -> (
				(oc_sluice_1 == None) -> (
					S_Occupy_Sluice(Sluice_1, InsideOpen).S_Robot_Put_Down(Robot_2, Location_Sluice_2).S_Release_Sluice(Sluice_1, InsideOpen).Controller(op, oc_robot_1, None, oc_robot_3, Post, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
			)
		)
		+ (op == Sluice_12_Broken) -> (
		% Sluice_1 and Sluice_2 of the system is broken so it cannot be opened or closed only repaired
			R_Fix(Sluice_1).Controller(Sluice_2_Broken, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ R_Fix(Sluice_2).Controller(Sluice_1_Broken, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			+ (oc_robot_1 == None) -> (
				(oc_sluice_1 == None) -> (
					S_Robot_Pick_Up(Robot_1, Location_InRack).Controller(op, Pre, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
				)
			)
			+ (oc_robot_1 == Post) -> (
				S_Robot_Put_Down(Robot_1, Location_OutRack).Controller(op, None, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, oc_IPU)
			)
			+ (oc_robot_2 == Pre) -> (
				(oc_InWaitRack == None) -> (
					S_Robot_Put_Down(Robot_2, Location_InWaitRack).Controller(op, oc_robot_1, None, oc_robot_3, oc_sluice_1, oc_sluice_2, Pre, oc_OutWaitRack, oc_IPU)
				)
			)
		)
		% Robot_3 is not affected by the sluices breaking for its behaviour
		+ (oc_robot_3 == None) -> (
			(oc_InWaitRack == Pre && oc_IPU == None) -> (
				S_Robot_Pick_Up(Robot_3, Location_InWaitRack).Controller(op, oc_robot_1, oc_robot_2, Pre, oc_sluice_1, oc_sluice_2, None, oc_OutWaitRack, oc_IPU)
			)
			+ (oc_IPU == Post && oc_OutWaitRack == None) -> (
				S_Robot_Pick_Up(Robot_3, Location_IPU).Controller(op, oc_robot_1, oc_robot_2, Post, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, None)
			)
		)
		+ (oc_robot_3 == Pre) -> (
			(oc_IPU == None) -> (
				S_Robot_Put_Down(Robot_3, Location_IPU).Controller(op, oc_robot_1, oc_robot_2, None, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, Pre)
			)
		)
		+ (oc_robot_3 == Post) -> (
			(oc_OutWaitRack == None) -> (
				S_Robot_Put_Down(Robot_3, Location_OutWaitRack).Controller(op, oc_robot_1, oc_robot_2, None, oc_sluice_1, oc_sluice_2, oc_InWaitRack, Post, oc_IPU)
			)
		)
		% IPU is not affected by the sluices breaking for its behaviour
		+ (oc_IPU == Pre) -> (
			S_IPU_On(IPU_1).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, Pre)
			+ S_IPU_Off(IPU_1).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, Pre)
		)
		+ R_ACK_IPU_On(IPU_1).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, Pre)
		+ R_ACK_IPU_Off(IPU_1).Controller(op, oc_robot_1, oc_robot_2, oc_robot_3, oc_sluice_1, oc_sluice_2, oc_InWaitRack, oc_OutWaitRack, Post)
		;



init
%	hide({Controller_Command_Sluice, Sluice_ACK, Break, Fix, Controller_IPU_On, Controller_IPU_Off, IPU_IPU_Off, IPU_IPU_On, Occupy_Sluice, Release_Sluice},
		allow(
		% Only Multi-actions are allowed
		{Controller_Command_Sluice, Sluice_ACK, P_Open_Inside_Door, P_Close_Inside_Door, P_Open_Outside_Door, P_Close_Outside_Door, P_Create_Vacuum, 
		P_Undo_Vacuum, P_Break, P_Fix, Break, Fix, Robot_Pick_Up, Robot_Put_Down, Controller_IPU_On, Controller_IPU_Off, IPU_IPU_On, IPU_IPU_Off, P_IPU_On, P_IPU_Off, Occupy_Sluice, Release_Sluice},
			comm(
				{ 
				S_Sluice_Command|R_Sluice_Command -> Controller_Command_Sluice,
				S_Sluice_ACK|R_Sluice_ACK -> Sluice_ACK,
				S_Break|R_Break -> Break,
				S_Fix|R_Fix -> Fix,
				S_Robot_Pick_Up|R_Robot_Pick_Up -> Robot_Pick_Up,
				S_Robot_Put_Down|R_Robot_Put_Down -> Robot_Put_Down,
				S_IPU_On|R_IPU_On -> Controller_IPU_On,
				S_IPU_Off|R_IPU_Off	-> Controller_IPU_Off,
				S_ACK_IPU_On|R_ACK_IPU_On -> IPU_IPU_On,
				S_ACK_IPU_Off|R_ACK_IPU_Off -> IPU_IPU_Off,
				S_Occupy_Sluice|R_Occupy_Sluice -> Occupy_Sluice,
				S_Release_Sluice|R_Release_Sluice -> Release_Sluice
				
				},
				Physical_Sluice(Sluice_1, false, NoVacuum) || Physical_Sluice(Sluice_2, false, NoVacuum) || Physical_IPU(IPU_1, false) 
				|| Physical_Robot(Robot_1) || Physical_Robot(Robot_2) || Physical_Robot(Robot_3) 
				|| Controller(Normal, None, None, None, None, None, None, None, None)
%				Physical_Sluice(Sluice_1, false, NoVacuum) || Physical_Sluice(Sluice_2, false, NoVacuum) || Physical_Robot(Robot_1) || Controller(Normal, None, None, None, None, None, None, None, None)
%				Physical_Sluice(Sluice_1, false, NoVacuum) || Controller(Normal, None, None, None, None, None, None, None, None)
			)
		)
%	)
;