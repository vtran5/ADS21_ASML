sort
	Sluice = struct Sluice_1 | Sluice_2;
	Wafer = struct Wafer_In?isWafer_In | Wafer_Out?isWafer_Out | No_Wafer?isNo_Wafer;
	Robot = struct Robot_1?isRobot_1 | Robot_2?isRobot_2 | Robot_3?isRobot_3;
	Location = struct Location_InRack | Location_OutRack | Location_Sluice_1 | Location_Sluice_2 | Location_InWaitRack | Location_OutWaitRack | Location_IPU;
	OrderRobot = struct OrderRobot (robot: Robot, location : Location);

act
	Open_Inside_Door	: Sluice; % Open the inside door of a sluice
	Open_Outside_Door	: Sluice; % Open the outside door of a sluice
	Close_Inside_Door	: Sluice; % Close the inside door of a sluice
	Close_Outside_Door	: Sluice; % Close the outside door of a sluice

	S_Open_Inside_Door	: Sluice; % Controller tells to open the inside door
	S_Open_Outside_Door : Sluice; % Controller tells to open the outside door
	S_Close_Inside_Door	: Sluice; % Controller tells to close the inside door
	S_Close_Outside_Door : Sluice; % Controller tells to close the outside door

	R_Open_Inside_Door	: Sluice; % Controller tells to open the inside door
	R_Open_Outside_Door : Sluice; % Controller tells to open the outside door
	R_Close_Inside_Door	: Sluice; % Controller tells to close the inside door
	R_Close_Outside_Door : Sluice; % Controller tells to close the outside door

	Open_Door: Sluice;
	Close_Door: Sluice;

	R_Robot_Pick_Up		: Robot # Location; % Specified Robot has to pick up wafer at specfied Location.
	R_Robot_Put_Down	: Robot # Location;

	S_Robot_Pick_Up		: Robot # Location;
	S_Robot_Put_Down	: Robot # Location;

	Pick_Up				: Robot # Location;
	Put_Down			: Robot # Location;


proc
	Physical_Sluice(s: Sluice) = %R_Open_Inside_Door(s).R_Close_Inside_Door(s).Physical_Sluice(s);
		(
		R_Open_Inside_Door(s).R_Close_Inside_Door(s)
		+ R_Open_Outside_Door(s).R_Close_Outside_Door(s)
		).Physical_Sluice(s);

	%Sluice_Controller(s: Sluice) = S_Open_Inside_Door(s).S_Close_Inside_Door(s).Sluice_Controller(s);
		%(
		%S_Open_Inside_Door(s).S_Close_Inside_Door(s)
		%+ S_Open_Outside_Door(s).S_Close_Outside_Door(s)
		%).Sluice_Controller(s);

	Physical_Robot(r : Robot) = 
		(
		(isRobot_1(r)) -> (
			R_Robot_Pick_Up(r, Location_InRack).R_Robot_Put_Down(r,Location_Sluice_1)
			+ R_Robot_Pick_Up(r, Location_Sluice_1).R_Robot_Put_Down(r, Location_OutRack))
		).Physical_Robot(r);

	%s1_stat expresses the status of sluice 1: true is occupied, false is not occupied
	Robot_Controller(r : Robot, s: Sluice, s1_stat: Bool) =
		(
		(isRobot_1(r)) ->(
			(s1_stat) -> S_Open_Outside_Door(s).S_Robot_Pick_Up(r, Location_Sluice_1).S_Robot_Put_Down(r,Location_OutRack).S_Close_Outside_Door(s).Robot_Controller(r, s, false)
			<> S_Open_Inside_Door(s).S_Robot_Pick_Up(r, Location_InRack).S_Robot_Put_Down(r,Location_Sluice_1).S_Close_Inside_Door(s).Robot_Controller(r,s,true))
		);

init
	allow(
	{Open_Inside_Door, Close_Inside_Door, Open_Outside_Door, Close_Outside_Door, Pick_Up, Put_Down},
		comm(
			{ S_Open_Inside_Door|R_Open_Inside_Door -> Open_Inside_Door, S_Close_Inside_Door|R_Close_Inside_Door -> Close_Inside_Door,
			 S_Open_Outside_Door|R_Open_Outside_Door -> Open_Outside_Door, S_Close_Outside_Door|R_Close_Outside_Door -> Close_Outside_Door,
			 S_Robot_Pick_Up|R_Robot_Pick_Up -> Pick_Up, S_Robot_Put_Down|R_Robot_Put_Down -> Put_Down},
		Physical_Sluice(Sluice_1)||Physical_Robot(Robot_1)||Robot_Controller(Robot_1,Sluice_1,false)
	));
